-- Create a table for public profiles
create table profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamptz,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);

alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Create a table for movies
create table movies (
  id bigint generated by default as identity primary key,
  tmdb_id integer unique not null,
  title text not null,
  overview text,
  release_date date,
  poster_path text,
  popularity real,
  genres integer[]
);

alter table movies
  enable row level security;

create policy "Movies are viewable by everyone." on movies
  for select using (true);

-- Create a table for user swipes
create table swipes (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles not null,
  movie_id bigint references public.movies not null,
  liked boolean not null, -- true for 'like', false for 'dislike'
  created_at timestamptz default now(),
  unique(user_id, movie_id)
);

alter table swipes
  enable row level security;

create policy "Users can view their own swipes." on swipes
  for select using (auth.uid() = user_id);

create policy "Users can insert their own swipes." on swipes
  for insert with check (auth.uid() = user_id);

-- Create a table for couples
create table couples (
  id bigint generated by default as identity primary key,
  user1_id uuid references public.profiles not null,
  user2_id uuid references public.profiles not null,
  status text not null default 'pending', -- e.g., 'pending', 'accepted'
  created_at timestamptz default now(),
  unique(user1_id, user2_id)
);

alter table couples
  enable row level security;

create policy "Users can view and manage their own couple invitations." on couples
  for all using (auth.uid() = user1_id or auth.uid() = user2_id);